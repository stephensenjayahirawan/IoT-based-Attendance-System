/*************************************************** 
  This is an example sketch for our optical Fingerprint sensor

  Adafruit invests time and resources providing this open source code, 
  please support Adafruit and open-source hardware by purchasing 
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.  
  BSD license, all text above must be included in any redistribution
 ****************************************************/


#include <Adafruit_Fingerprint.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h> 
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
 
const char* wifiName = "it@bkaunpar";
const char* wifiPass = "kantinqiu";
 
//Web Server address to read/write from 
const char *host = "http://stephen.parkboy.net/getFingerprint";
int getFingerprintIDez();

// pin #2 is IN from sensor (GREEN wire)
// pin #3 is OUT from arduino  (WHITE wire)
SoftwareSerial mySerial(4,5);


  String payload="";
   // Parse JSON object
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
byte fingerprint1[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x03, 0x01, 0x4F, 0x1C, 0x88, 0x00, 0xFF, 0x0E, 0xFE, 0x0E, 0xFE, 0x0E, 0xE0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x06, 0xC0, 0x06, 0xE0, 0x06, 0xE0, 0x1E, 0xF0, 0x1E, 0xF8, 0x3E, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x44, 0x32, 0x01, 0xBF, 0x2B, 0x13, 0xA1, 0x1C, 0x6E, 0x1A, 0x52, 0x1A, 0x6F, 0x9C, 0x65, 0xBA, 0x54, 0x9E, 0xAA, 0x9B, 0x55, 0xA7, 0x00, 0xF3, 0x2A, 0x2D, 0x9C, 0x1B, 0x53, 0x18, 0xE7, 0x12, 0x5B, 0x28, 0x19, 0x12, 0x30, 0x2E, 0x81, 0xB2, 0x51, 0x96, 0x20, 0xF9, 0x30, 0xA8, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x57, 0x96, 0x63, 0xF3, 0x4A, 0x18, 0x20, 0x39, 0x47, 0x1A, 0x9D, 0x19, 0x59, 0x9E, 0xE9, 0xD9, 0x34, 0xAF, 0x1A, 0x73, 0x5C, 0x0E, 0xA0, 0xD6, 0x60, 0x8E, 0x60, 0x71, 0x3E, 0x97, 0x61, 0x31, 0x27, 0x27, 0x5C, 0x57, 0x3F, 0x95, 0x0C, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x97, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x03, 0x01, 0x5C, 0x1B, 0x86, 0x00, 0xFF, 0xFE, 0xF1, 0xFE, 0xE0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x02, 0xE0, 0x02, 0xF0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x8A, 0xCB, 0xBE, 0x35, 0x0B, 0x08, 0x3E, 0x6B, 0x8D, 0xE3, 0xDE, 0x60, 0x18, 0x26, 0xBE, 0x33, 0x9C, 0xC4, 0x9E, 0x23, 0x24, 0x5C, 0xBE, 0x2C, 0xAA, 0x9B, 0x9E, 0x16, 0x2A, 0xC5, 0x7E, 0x65, 0x2C, 0x2C, 0xBE, 0x2D, 0x3C, 0xC3, 0x7E, 0x6A, 0xBE, 0xC0, 0xF6, 0x53, 0x40, 0x80, 0xDE, 0x27, 0x8F, 0x61, 0x9F, 0x11, 0x13, 0x20, 0x3F, 0x54, 0x1E, 0x6B, 0x1F, 0x48, 0xAF, 0x81, 0x5F, 0x53, 0x31, 0xC1, 0x1F, 0x4E, 0x10, 0x5F, 0x5C, 0x2C, 0xA2, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x00, 0x82, 0x4E, 0x9A, 0x2A, 0x3C, 0x51, 0x95, 0xA6, 0xB2, 0x5D, 0xA2, 0x6A, 0x7A, 0x55, 0x93, 0x24, 0x13, 0x45, 0x17, 0x1D, 0x9B, 0x26, 0xB5, 0x43, 0xBB, 0x2D, 0x34, 0x5B, 0x18, 0x49, 0x15, 0x1F, 0xF9, 0x31, 0x33, 0xC2, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x4E};
byte fingerprint2[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x03, 0x01, 0x46, 0x17, 0x80, 0x00, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0x06, 0xFE, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0xE0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xF0, 0x02, 0x00, 0x00, 0xB6, 0xA7, 0xBE, 0x76, 0x39, 0x67, 0x3E, 0x4A, 0x1C, 0x4A, 0x9F, 0x3E, 0x8E, 0x8C, 0x93, 0x54, 0xA2, 0xCC, 0x9B, 0x70, 0x2B, 0x63, 0x7B, 0x52, 0x18, 0x8A, 0x56, 0x47, 0x93, 0x62, 0x34, 0x31, 0x0E, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x4D, 0x17, 0x4B, 0xCF, 0x49, 0x27, 0xDF, 0xEE, 0x4D, 0xA6, 0xA1, 0x4F, 0x56, 0xA8, 0x23, 0x68, 0x4A, 0xAC, 0x5B, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x25, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x03, 0x01, 0x3F, 0x13, 0x80, 0x00, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFE, 0x00, 0xFC, 0x00, 0xF0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xC0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xF0, 0x00, 0xF8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xA0, 0xA0, 0xDE, 0x3C, 0xAB, 0x5E, 0x5E, 0x67, 0xB5, 0xA7, 0xDE, 0x74, 0xB7, 0xA7, 0x5E, 0x60, 0xC2, 0xAB, 0x1E, 0x6B, 0xC3, 0x95, 0x3F, 0x4C, 0x96, 0x0B, 0x1C, 0x54, 0x17, 0x8A, 0x5C, 0x4E, 0x33, 0x2B, 0x3C, 0x58, 0xA0, 0x4C, 0x5A, 0x6F, 0x29, 0x50, 0xBA, 0x73, 0x2A, 0x23, 0x3B, 0x44, 0xAF, 0x03, 0x12, 0x49, 0x30, 0x19, 0x92, 0x4C, 0x9A, 0x8A, 0xD3, 0x44, 0x1A, 0x0B, 0x70, 0x49, 0x9A, 0x0C, 0x2C, 0x4B, 0x2B, 0x1B, 0xEF, 0x31, 0x44, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x00, 0x82, 0x61, 0x29, 0xE3, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xDF};
byte fingerprint3[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x03, 0x01, 0x53, 0x13, 0x79, 0x00, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFC, 0x02, 0xF8, 0x00, 0xF8, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x22, 0x5D, 0x59, 0x95, 0xCB, 0xBA, 0x4A, 0x18, 0x49, 0xDB, 0x52, 0x95, 0x0B, 0x52, 0x52, 0x97, 0xE1, 0xD2, 0x32, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xA6, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x82, 0x03, 0x01, 0x43, 0x11, 0x7E, 0x00, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0x1E, 0xFC, 0x06, 0xF8, 0x02, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xF0, 0x00, 0xF8, 0x00, 0xF8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x22, 0x23, 0x3E, 0x6C, 0xB0, 0xA7, 0x9E, 0x28, 0x36, 0xDD, 0x3E, 0x4C, 0x37, 0xEC, 0xBE, 0x3D, 0x41, 0x01, 0xFE, 0x62, 0xA0, 0x22, 0xBF, 0x56, 0xC2, 0x56, 0xFF, 0x54, 0x92, 0x8B, 0x3C, 0x4E, 0x13, 0x4B, 0x1A, 0x42, 0x15, 0xE2, 0x3A, 0x4E, 0x17, 0x21, 0xF8, 0x59, 0xAA, 0x66, 0x38, 0x45, 0x97, 0x89, 0xD9, 0x73, 0x2D, 0x90, 0xD1, 0x60, 0xA5, 0x0F, 0x54, 0x54, 0xA3, 0x22, 0x71, 0x51, 0xA5, 0x1E, 0x31, 0x00, 0x00, 0x00, 0x00, 0x30, 0xD1, 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A};
void setup()         

{
  
  Serial.begin(9600);
  while(!Serial);
  Serial.println("Fingerprint template extractor");

  // set the data rate for the sensor serial port
  finger.begin(57600);
  WiFi.begin(wifiName, wifiPass);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
 
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP()); 
  
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1);
  }
 
  Serial.print("Request Link:");
  Serial.println(host);
  HTTPClient http;
  http.begin(host);     //Specify request destination
  
  int httpCode = http.GET();            //Send the request
  payload = http.getString();    //Get the response payload from server
 
  Serial.print("Response Code:"); //200 is OK
  Serial.println(httpCode);   //Print HTTP return code
 
  Serial.print("Returned data from Server:");
//  Serial.println(payload);    //Print request response payload
  const size_t capacity = JSON_OBJECT_SIZE(3) + JSON_ARRAY_SIZE(2) + 60;
    DynamicJsonBuffer jsonBuffer(capacity);
  if(httpCode == 200)
  {
   JsonObject& root = jsonBuffer.parseObject(payload);
   
    if (!root.success()) {
      Serial.println(F("Parsing failed!"));
      return;
    }
  
    // Decode JSON/Extract values
    Serial.println(F("Response:"));
    Serial.println(root["FINGERPRINT"]["length"].as<int>());
    
    uint8_t id = 1;
    downloadFingerprintTemplate(id);
    Serial.println("------------------------------------");
    Serial.print("Attempting to load #"); Serial.println(id);
    int written = 0;
  //  mySerial.write(fingerprint,sizeof(fingerprint));
    
//    mySerial.write(fingerprint1,sizeof(fingerprint1)); 
    mySerial.flush();
    uint8_t p = finger.uploadTemplate();
      mySerial.flush();
      
    if (p == FINGERPRINT_OK) {
      Serial.println("Writing Template!");
      for(int i = 0; i < root["FINGERPRINT"]["length"].as<int>()-1; i++){
          byte a = byte(root["FINGERPRINT"]["template"][i].as<int>());
          mySerial.write(a); 
          yield();
      }
      mySerial.flush();
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
    } else if (p == FINGERPRINT_BADLOCATION) {
      Serial.println("Could not store in that location");
    } else if (p == FINGERPRINT_FLASHERR) {
      Serial.println("Error writing to flash");
    } else {
      Serial.println("Unknown error");
    }  
    p = finger.uploadTemplate2();
      mySerial.flush();
      
    if (p == FINGERPRINT_OK) {
      Serial.println("Writing Template!");
      for(int i = 0; i < root["FINGERPRINT"]["length"].as<int>()-1; i++){
          byte a = byte(root["FINGERPRINT"]["template"][i].as<int>());
          mySerial.write(a); 
          yield();
      }
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
    } else if (p == FINGERPRINT_BADLOCATION) {
      Serial.println("Could not store in that location");
    } else if (p == FINGERPRINT_FLASHERR) {
      Serial.println("Error writing to flash");
    } else {
      Serial.println("Unknown error");
    }  
     mySerial.flush();
    p = finger.storeModel(id);
     
    if (p == FINGERPRINT_OK) {
      Serial.println("Stored!");
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
    } else if (p == FINGERPRINT_BADLOCATION) {
      Serial.println("Could not store in that location");
    } else if (p == FINGERPRINT_FLASHERR) {
      Serial.println("Error writing to flash");
    } else {
      Serial.println("Unknown error");
    }  
//    p = finger.uploadTemplate();
//      mySerial.flush();
//    if (p == FINGERPRINT_OK) {
//      Serial.println("Writing Template!");
//      for(int i = 0; i < root["FINGERPRINT"]["panjang"].as<int>()-1; i++){
//          byte a = byte(root["FINGERPRINT"]["sampah"][i].as<int>());
//          mySerial.write(a); 
//          Serial.print(a);
//          yield();
//      }
//      
//    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
//      Serial.println("Communication error");
//    } else if (p == FINGERPRINT_BADLOCATION) {
//      Serial.println("Could not store in that location");
//    } else if (p == FINGERPRINT_FLASHERR) {
//      Serial.println("Error writing to flash");
//    } else {
//      Serial.println("Unknown error");
//    }  
//    p = finger.storeModel(id);
//      mySerial.flush();
//    if (p == FINGERPRINT_OK) {
//      Serial.println("Stored!");
//    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
//      Serial.println("Communication error");
//    } else if (p == FINGERPRINT_BADLOCATION) {
//      Serial.println("Could not store in that location");
//    } else if (p == FINGERPRINT_FLASHERR) {
//      Serial.println("Error writing to flash");
//    } else {
//      Serial.println("Unknown error");
//    }
id= 2;
      p = finger.storeModel2(id);
      Serial.println(id+1);
      mySerial.flush();
    if (p == FINGERPRINT_OK) {
      Serial.println("Stored!");
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
    } else if (p == FINGERPRINT_BADLOCATION) {
      Serial.println("Could not store in that location");
    } else if (p == FINGERPRINT_FLASHERR) {
      Serial.println("Error writing to flash");
    } else {
      Serial.println("Unknown error");
    }  
   
  Serial.println("\ndone.");
  finger.getTemplateCount();
  Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
  Serial.println("Waiting for valid finger...");
 
    Serial.println();
    
  http.end();
  }
  else
  {
    Serial.println("Error in response");
  }

  // Try to get the templates for fingers 1 through 10
}

uint8_t downloadFingerprintTemplate(uint8_t id)
{
  
}


void printHex(int num, int precision) {
    char tmp[16];
    char format[128];
 
    sprintf(format, "%%.%dX", precision);
 
    sprintf(tmp, format, num);
    Serial.print(tmp);
}

void loop()
{
  
  getFingerprintIDez();
  delay(50);
}

int getFingerprintIDez() {
   HTTPClient http;
   http.begin(host); 
   int code = http.GET();
   payload = http.getString();
   const size_t capacity = JSON_OBJECT_SIZE(3) + JSON_ARRAY_SIZE(2) + 60;
   DynamicJsonBuffer jsonBuffer(capacity);
   JsonObject& root = jsonBuffer.parseObject(payload);
   http.end();
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;
  
  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  Serial.print(" with confidence of "); Serial.println(finger.confidence);
  return finger.fingerID; 
}
